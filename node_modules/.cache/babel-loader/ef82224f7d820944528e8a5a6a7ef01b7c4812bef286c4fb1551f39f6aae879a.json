{"ast":null,"code":"var _jsxFileName = \"/Users/soha/Desktop/lightbeam ny/src/Entur.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Entur = () => {\n  _s();\n  const [departures, setDepartures] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchDepartures = async () => {\n      const query = `\n        {\n          stopPlace(id: \"NSR:StopPlace:58335\") {\n            name\n            estimatedCalls(timeRange: 72100, numberOfDepartures: 20, whiteListedModes: [metro]) {\n              realtime\n              aimedArrivalTime\n              expectedArrivalTime\n              destinationDisplay {\n                frontText\n              }\n              serviceJourney {\n                journeyPattern {\n                  line {\n                    publicCode\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n      try {\n        const response = await fetch(\"https://api.entur.io/journey-planner/v2/graphql\", {\n          method: \"POST\",\n          headers: {\n            \"ET-Client-Name\": \"your-app-name\",\n            // Replace with your app name\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        if (result.errors) {\n          throw new Error(`GraphQL error! ${result.errors.map(e => e.message).join(\", \")}`);\n        }\n        setDepartures(result.data.stopPlace.estimatedCalls);\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetching error: \", err);\n      }\n    };\n    fetchDepartures();\n    const interval = setInterval(fetchDepartures, 60000); // Fetch data every 60 seconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n  const formatTimeDifference = time => {\n    const now = new Date();\n    const departureTime = new Date(time);\n    const diffMs = departureTime - now;\n    const diffMins = Math.round(diffMs / 60000);\n    if (diffMins <= 0) {\n      return \"Now\";\n    }\n    return `${diffMins} min`;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Real-Time Departures for Majorstuen T-bane\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: departures.map((departure, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [departure.serviceJourney.journeyPattern.line.publicCode, \" -\", \" \", departure.destinationDisplay.frontText, \" - Expected:\", \" \", formatTimeDifference(departure.expectedArrivalTime)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_s(Entur, \"Uul93ExvS3pt/0IpMjjQPoZ1tpU=\");\n_c = Entur;\nexport default Entur;\nvar _c;\n$RefreshReg$(_c, \"Entur\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Entur","_s","departures","setDepartures","error","setError","fetchDepartures","query","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","result","json","errors","map","e","message","join","data","stopPlace","estimatedCalls","err","console","interval","setInterval","clearInterval","formatTimeDifference","time","now","Date","departureTime","diffMs","diffMins","Math","round","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","departure","index","serviceJourney","journeyPattern","line","publicCode","destinationDisplay","frontText","expectedArrivalTime","_c","$RefreshReg$"],"sources":["/Users/soha/Desktop/lightbeam ny/src/Entur.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Entur = () => {\n  const [departures, setDepartures] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchDepartures = async () => {\n      const query = `\n        {\n          stopPlace(id: \"NSR:StopPlace:58335\") {\n            name\n            estimatedCalls(timeRange: 72100, numberOfDepartures: 20, whiteListedModes: [metro]) {\n              realtime\n              aimedArrivalTime\n              expectedArrivalTime\n              destinationDisplay {\n                frontText\n              }\n              serviceJourney {\n                journeyPattern {\n                  line {\n                    publicCode\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n\n      try {\n        const response = await fetch(\n          \"https://api.entur.io/journey-planner/v2/graphql\",\n          {\n            method: \"POST\",\n            headers: {\n              \"ET-Client-Name\": \"your-app-name\", // Replace with your app name\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ query }),\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const result = await response.json();\n        if (result.errors) {\n          throw new Error(\n            `GraphQL error! ${result.errors.map((e) => e.message).join(\", \")}`\n          );\n        }\n\n        setDepartures(result.data.stopPlace.estimatedCalls);\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetching error: \", err);\n      }\n    };\n\n    fetchDepartures();\n    const interval = setInterval(fetchDepartures, 60000); // Fetch data every 60 seconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, []);\n\n  const formatTimeDifference = (time) => {\n    const now = new Date();\n    const departureTime = new Date(time);\n    const diffMs = departureTime - now;\n    const diffMins = Math.round(diffMs / 60000);\n\n    if (diffMins <= 0) {\n      return \"Now\";\n    }\n\n    return `${diffMins} min`;\n  };\n\n  return (\n    <div>\n      <h1>Real-Time Departures for Majorstuen T-bane</h1>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      <ul>\n        {departures.map((departure, index) => (\n          <li key={index}>\n            {departure.serviceJourney.journeyPattern.line.publicCode} -{\" \"}\n            {departure.destinationDisplay.frontText} - Expected:{\" \"}\n            {formatTimeDifference(departure.expectedArrivalTime)}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Entur;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}