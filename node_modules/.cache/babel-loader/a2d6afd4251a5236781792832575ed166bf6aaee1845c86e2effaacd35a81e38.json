{"ast":null,"code":"var _jsxFileName = \"/Users/soha/Desktop/lightbeam ny/src/ViewContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./view.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ViewContent = ({\n  setOfficeScreenContent\n}) => {\n  _s();\n  const [selectedTable, setSelectedTable] = useState(\"\");\n  const [tableData, setTableData] = useState([]);\n  const [selectedEntries, setSelectedEntries] = useState([]);\n  const [showButtons, setShowButtons] = useState(false);\n  const [addButtonStyle, setAddButtonStyle] = useState({});\n  const [deleteButtonStyle, setDeleteButtonStyle] = useState({});\n  const [editButtonStyle, setEditButtonStyle] = useState({});\n  const [editing, setEditing] = useState(false);\n  const [editValues, setEditValues] = useState({});\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const navigate = useNavigate();\n  const selectRef = useRef(null);\n  const tableNames = {\n    users: \"Brukere\",\n    comments: \"Beskjeder\",\n    events: \"Arrangementer\",\n    canteenMenu: \"Kantinemeny\"\n  };\n  const fetchTableData = async table => {\n    console.log(`Fetching data from table: ${table}`);\n    try {\n      const response = await axios.get(`http://localhost:3000/${table}`);\n      console.log(`Data fetched from ${table}:`, response.data);\n      setTableData(response.data);\n    } catch (error) {\n      console.error(`Error fetching data from ${table}:`, error);\n    }\n  };\n  const handleTableChange = e => {\n    console.log(`Table changed to: ${e.target.value}`);\n    setSelectedTable(e.target.value);\n    setShowButtons(false);\n    setSuccessMessage(\"\");\n    setEditing(false);\n    setSelectedEntries([]); // Reset selected entries\n    setEditValues({}); // Reset edit values\n    if (e.target.value) {\n      fetchTableData(e.target.value);\n    } else {\n      setTableData([]);\n    }\n  };\n  const handleCheckboxChange = entry => {\n    console.log(`Checkbox changed for entry:`, entry);\n    setSelectedEntries(prevEntries => {\n      if (prevEntries.includes(entry)) {\n        return prevEntries.filter(e => e !== entry);\n      } else {\n        return [...prevEntries, entry];\n      }\n    });\n  };\n  const formatDateForMySQL = dateString => {\n    const date = new Date(dateString);\n    return date.toISOString().slice(0, 19).replace(\"T\", \" \");\n  };\n  const formatDate = dateString => {\n    const options = {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n  const handleAddToScreen = async () => {\n    console.log(\"Adding selected entries to screen:\", selectedEntries);\n    const promises = selectedEntries.map(entry => {\n      return axios.get(`http://localhost:3000/${selectedTable}/${entry.id}`);\n    });\n    try {\n      const results = await Promise.all(promises);\n      const entriesData = results.map(result => ({\n        ...result.data,\n        table: selectedTable\n      }));\n      let addedEntries = [];\n      setOfficeScreenContent(prevContent => {\n        const savedContent = localStorage.getItem(\"officeScreenContent\");\n        const parsedContent = savedContent ? JSON.parse(savedContent) : [];\n        const newContent = [...parsedContent];\n        entriesData.forEach(entry => {\n          if (!parsedContent.some(existingEntry => existingEntry.id === entry.id && existingEntry.table === entry.table)) {\n            newContent.push(entry);\n            addedEntries.push(entry);\n          }\n        });\n        console.log(\"New content to be saved to localStorage:\", newContent);\n        localStorage.setItem(\"officeScreenContent\", JSON.stringify(newContent));\n        return newContent;\n      });\n      if (addedEntries.length > 0) {\n        setSuccessMessage(\"Lagt til på skjerm\");\n      } else {\n        setSuccessMessage(\"Finnes allerede på skjermnen.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data for selected entries:\", error);\n      setSuccessMessage(\"Failed to add to the screen.\");\n    }\n  };\n  const handleDeleteSelected = async () => {\n    console.log(\"Deleting selected entries:\", selectedEntries);\n    const promises = selectedEntries.map(entry => {\n      return axios.delete(`http://localhost:3000/${selectedTable}/${entry.id}`);\n    });\n    try {\n      await Promise.all(promises);\n      setSuccessMessage(\"Slettet fra database\");\n      fetchTableData(selectedTable);\n      setSelectedEntries([]);\n    } catch (error) {\n      console.error(\"Error deleting selected entries:\", error);\n      setSuccessMessage(\"Failed to delete selected entries.\");\n    }\n  };\n  const handleEdit = () => {\n    console.log(\"Entering edit mode with selected entries:\", selectedEntries);\n    setEditing(true);\n    const initialEditValues = selectedEntries.reduce((acc, entry) => {\n      acc[entry.id] = {\n        ...entry\n      };\n      return acc;\n    }, {});\n    setEditValues(initialEditValues);\n    console.log(\"Initial edit values:\", initialEditValues);\n  };\n  const handleSave = async () => {\n    console.log(\"Saving edited entries:\", editValues);\n    const formattedEditValues = Object.values(editValues).map(entry => {\n      if (entry.date) {\n        entry.date = formatDateForMySQL(entry.date);\n      }\n      if (entry.birthdate) {\n        entry.birthdate = formatDateForMySQL(entry.birthdate);\n      }\n      if (entry.created_at) {\n        entry.created_at = formatDateForMySQL(entry.created_at);\n      }\n      return entry;\n    });\n    console.log(\"Formatted edited entries:\", formattedEditValues);\n    const promises = formattedEditValues.map(entry => {\n      console.log(`Updating entry with ID ${entry.id}`, entry); // Debug log\n      const {\n        id,\n        user_id,\n        ...editableFields\n      } = entry; // Exclude id and user_id from editable fields\n      return axios.put(`http://localhost:3000/${selectedTable}/${entry.id}`, editableFields, {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      }).then(response => {\n        console.log(\"Response:\", response);\n        // Update localStorage\n        setOfficeScreenContent(prevContent => {\n          const savedContent = localStorage.getItem(\"officeScreenContent\");\n          const parsedContent = savedContent ? JSON.parse(savedContent) : [];\n          const updatedContent = parsedContent.map(item => {\n            if (item.id === entry.id && item.table === selectedTable) {\n              return {\n                ...item,\n                ...editableFields\n              };\n            }\n            return item;\n          });\n          localStorage.setItem(\"officeScreenContent\", JSON.stringify(updatedContent));\n          return updatedContent;\n        });\n      }).catch(error => {\n        console.error(\"Error:\", error.response ? error.response.data : error.message);\n      });\n    });\n    try {\n      await Promise.all(promises);\n      setSuccessMessage(\"Oppdatering vellykket\");\n      setEditing(false);\n      fetchTableData(selectedTable);\n      setSelectedEntries([]);\n      setEditValues({});\n    } catch (error) {\n      console.error(\"Error updating selected entries:\", error);\n      console.error(\"Server response:\", error.response); // Additional log\n      setSuccessMessage(\"Failed to update selected entries.\");\n    }\n  };\n  useEffect(() => {\n    setShowButtons(selectedTable !== \"\");\n    console.log(\"Selected table:\", selectedTable);\n    const longestOptionTextWidth = Math.max(...Array.from(selectRef.current.options).map(option => option.text.length * 8));\n    selectRef.current.style.width = `${longestOptionTextWidth + 40}px`;\n  }, [selectedTable]);\n  const buttonStyle = {\n    backgroundColor: \"#242f45\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"4px\",\n    padding: \"10px 20px\",\n    cursor: \"pointer\",\n    fontWeight: \"bold\",\n    marginTop: \"20px\",\n    marginRight: \"10px\",\n    transition: \"all 0.3s ease\"\n  };\n  const handleMouseEnter = setButtonStyle => {\n    setButtonStyle(prevStyle => ({\n      ...prevStyle,\n      backgroundColor: \"#242f45\",\n      color: \"white\",\n      boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.3)\",\n      transform: \"scale(1.05)\"\n    }));\n  };\n  const handleEditChange = (id, key, value) => {\n    console.log(`Editing value for entry ${id} - ${key}: ${value}`);\n    setEditValues(prevValues => ({\n      ...prevValues,\n      [id]: {\n        ...prevValues[id],\n        [key]: value\n      }\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"view-content-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Legg til innhold som skal vises p\\xE5 skjermen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"table-select\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"table-select\",\n      ref: selectRef,\n      value: selectedTable,\n      onChange: handleTableChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Velg innhold...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"users\",\n        children: \"Brukere\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"comments\",\n        children: \"Beskjeder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"events\",\n        children: \"Arrangementer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"canteenMenu\",\n        children: \"Kantinemeny\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: [\"Innhold fra \", tableNames[selectedTable] || \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), tableData.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: \"100%\",\n          borderCollapse: \"collapse\",\n          textAlign: \"left\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 17\n            }, this), Object.keys(tableData[0]).map(key => key !== \"picture\" && /*#__PURE__*/_jsxDEV(\"th\", {\n              children: key.charAt(0).toUpperCase() + key.slice(1)\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            style: {\n              backgroundColor: index % 2 === 0 ? \"rgba(227, 213, 202, 0.6)\" : \"#3b4d70\",\n              color: index % 2 === 0 ? \"black\" : \"white\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: `checkbox-${index}`,\n                name: `checkbox-${index}`,\n                checked: selectedEntries.includes(entry),\n                onChange: () => handleCheckboxChange(entry)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }, this), Object.keys(tableData[0]).map(key => {\n              var _editValues$entry$id$, _editValues$entry$id;\n              return key !== \"picture\" && /*#__PURE__*/_jsxDEV(\"td\", {\n                children: editing && selectedEntries.includes(entry) ? /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: (_editValues$entry$id$ = (_editValues$entry$id = editValues[entry.id]) === null || _editValues$entry$id === void 0 ? void 0 : _editValues$entry$id[key]) !== null && _editValues$entry$id$ !== void 0 ? _editValues$entry$id$ : entry[key],\n                  onChange: e => handleEditChange(entry.id, key, e.target.value),\n                  disabled: key === \"id\" || key === \"user_id\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 29\n                }, this) : key === \"date\" || key === \"birthdate\" ? formatDate(entry[key]) : entry[key]\n              }, key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 25\n              }, this);\n            })]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), showButtons && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [selectedTable !== \"users\" && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddToScreen,\n        style: {\n          ...buttonStyle,\n          ...addButtonStyle\n        },\n        onMouseEnter: () => handleMouseEnter(setAddButtonStyle),\n        onMouseLeave: () => handleMouseLeave(setAddButtonStyle),\n        disabled: selectedEntries.length === 0 // Disable if no entries selected\n        ,\n        children: \"Legg til skjerm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteSelected,\n        style: {\n          ...buttonStyle,\n          ...deleteButtonStyle\n        },\n        onMouseEnter: () => handleMouseEnter(setDeleteButtonStyle),\n        onMouseLeave: () => handleMouseLeave(setDeleteButtonStyle),\n        disabled: selectedEntries.length === 0 // Disable if no entries selected\n        ,\n        children: \"Slett\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), !editing ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEdit,\n        style: {\n          ...buttonStyle,\n          ...editButtonStyle\n        },\n        onMouseEnter: () => handleMouseEnter(setEditButtonStyle),\n        onMouseLeave: () => handleMouseLeave(setEditButtonStyle),\n        disabled: selectedEntries.length === 0 // Disable if no entries selected\n        ,\n        children: \"Rediger\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        style: {\n          ...buttonStyle,\n          ...editButtonStyle\n        },\n        onMouseEnter: () => handleMouseEnter(setEditButtonStyle),\n        onMouseLeave: () => handleMouseLeave(setEditButtonStyle),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: \"rgba(227, 213, 202, 0.2)\",\n        color: \"black\",\n        border: \"1px solid #c3e6cb\",\n        borderRadius: \"4px\",\n        padding: \"10px\",\n        marginTop: \"20px\",\n        fontSize: \"16px\",\n        fontWeight: \"bold\",\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: \"10px\",\n          fontSize: \"20px\"\n        },\n        children: \"\\u2713\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 11\n      }, this), successMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewContent, \"0rh3t+zmPieEHva/xDtBznzU42s=\", false, function () {\n  return [useNavigate];\n});\n_c = ViewContent;\nexport default ViewContent;\nvar _c;\n$RefreshReg$(_c, \"ViewContent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ViewContent","setOfficeScreenContent","_s","selectedTable","setSelectedTable","tableData","setTableData","selectedEntries","setSelectedEntries","showButtons","setShowButtons","addButtonStyle","setAddButtonStyle","deleteButtonStyle","setDeleteButtonStyle","editButtonStyle","setEditButtonStyle","editing","setEditing","editValues","setEditValues","successMessage","setSuccessMessage","navigate","selectRef","tableNames","users","comments","events","canteenMenu","fetchTableData","table","console","log","response","get","data","error","handleTableChange","e","target","value","handleCheckboxChange","entry","prevEntries","includes","filter","formatDateForMySQL","dateString","date","Date","toISOString","slice","replace","formatDate","options","year","month","day","toLocaleDateString","undefined","handleAddToScreen","promises","map","id","results","Promise","all","entriesData","result","addedEntries","prevContent","savedContent","localStorage","getItem","parsedContent","JSON","parse","newContent","forEach","some","existingEntry","push","setItem","stringify","length","handleDeleteSelected","delete","handleEdit","initialEditValues","reduce","acc","handleSave","formattedEditValues","Object","values","birthdate","created_at","user_id","editableFields","put","headers","then","updatedContent","item","catch","message","longestOptionTextWidth","Math","max","Array","from","current","option","text","style","width","buttonStyle","backgroundColor","color","border","borderRadius","padding","cursor","fontWeight","marginTop","marginRight","transition","handleMouseEnter","setButtonStyle","prevStyle","boxShadow","transform","handleEditChange","key","prevValues","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","ref","onChange","marginBottom","borderCollapse","textAlign","keys","charAt","toUpperCase","index","type","name","checked","_editValues$entry$id$","_editValues$entry$id","disabled","onClick","onMouseEnter","onMouseLeave","handleMouseLeave","fontSize","display","alignItems","justifyContent","_c","$RefreshReg$"],"sources":["/Users/soha/Desktop/lightbeam ny/src/ViewContent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./view.css\";\n\nconst ViewContent = ({ setOfficeScreenContent }) => {\n  const [selectedTable, setSelectedTable] = useState(\"\");\n  const [tableData, setTableData] = useState([]);\n  const [selectedEntries, setSelectedEntries] = useState([]);\n  const [showButtons, setShowButtons] = useState(false);\n  const [addButtonStyle, setAddButtonStyle] = useState({});\n  const [deleteButtonStyle, setDeleteButtonStyle] = useState({});\n  const [editButtonStyle, setEditButtonStyle] = useState({});\n  const [editing, setEditing] = useState(false);\n  const [editValues, setEditValues] = useState({});\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const navigate = useNavigate();\n  const selectRef = useRef(null);\n\n  const tableNames = {\n    users: \"Brukere\",\n    comments: \"Beskjeder\",\n    events: \"Arrangementer\",\n    canteenMenu: \"Kantinemeny\",\n  };\n\n  const fetchTableData = async (table) => {\n    console.log(`Fetching data from table: ${table}`);\n    try {\n      const response = await axios.get(`http://localhost:3000/${table}`);\n      console.log(`Data fetched from ${table}:`, response.data);\n      setTableData(response.data);\n    } catch (error) {\n      console.error(`Error fetching data from ${table}:`, error);\n    }\n  };\n\n  const handleTableChange = (e) => {\n    console.log(`Table changed to: ${e.target.value}`);\n    setSelectedTable(e.target.value);\n    setShowButtons(false);\n    setSuccessMessage(\"\");\n    setEditing(false);\n    setSelectedEntries([]); // Reset selected entries\n    setEditValues({}); // Reset edit values\n    if (e.target.value) {\n      fetchTableData(e.target.value);\n    } else {\n      setTableData([]);\n    }\n  };\n\n  const handleCheckboxChange = (entry) => {\n    console.log(`Checkbox changed for entry:`, entry);\n    setSelectedEntries((prevEntries) => {\n      if (prevEntries.includes(entry)) {\n        return prevEntries.filter((e) => e !== entry);\n      } else {\n        return [...prevEntries, entry];\n      }\n    });\n  };\n\n  const formatDateForMySQL = (dateString) => {\n    const date = new Date(dateString);\n    return date.toISOString().slice(0, 19).replace(\"T\", \" \");\n  };\n\n  const formatDate = (dateString) => {\n    const options = {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  const handleAddToScreen = async () => {\n    console.log(\"Adding selected entries to screen:\", selectedEntries);\n    const promises = selectedEntries.map((entry) => {\n      return axios.get(`http://localhost:3000/${selectedTable}/${entry.id}`);\n    });\n\n    try {\n      const results = await Promise.all(promises);\n      const entriesData = results.map((result) => ({\n        ...result.data,\n        table: selectedTable,\n      }));\n\n      let addedEntries = [];\n\n      setOfficeScreenContent((prevContent) => {\n        const savedContent = localStorage.getItem(\"officeScreenContent\");\n        const parsedContent = savedContent ? JSON.parse(savedContent) : [];\n        const newContent = [...parsedContent];\n\n        entriesData.forEach((entry) => {\n          if (\n            !parsedContent.some(\n              (existingEntry) =>\n                existingEntry.id === entry.id &&\n                existingEntry.table === entry.table\n            )\n          ) {\n            newContent.push(entry);\n            addedEntries.push(entry);\n          }\n        });\n\n        console.log(\"New content to be saved to localStorage:\", newContent);\n        localStorage.setItem(\"officeScreenContent\", JSON.stringify(newContent));\n        return newContent;\n      });\n\n      if (addedEntries.length > 0) {\n        setSuccessMessage(\"Lagt til på skjerm\");\n      } else {\n        setSuccessMessage(\"Finnes allerede på skjermnen.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data for selected entries:\", error);\n      setSuccessMessage(\"Failed to add to the screen.\");\n    }\n  };\n\n  const handleDeleteSelected = async () => {\n    console.log(\"Deleting selected entries:\", selectedEntries);\n    const promises = selectedEntries.map((entry) => {\n      return axios.delete(`http://localhost:3000/${selectedTable}/${entry.id}`);\n    });\n\n    try {\n      await Promise.all(promises);\n      setSuccessMessage(\"Slettet fra database\");\n      fetchTableData(selectedTable);\n      setSelectedEntries([]);\n    } catch (error) {\n      console.error(\"Error deleting selected entries:\", error);\n      setSuccessMessage(\"Failed to delete selected entries.\");\n    }\n  };\n\n  const handleEdit = () => {\n    console.log(\"Entering edit mode with selected entries:\", selectedEntries);\n    setEditing(true);\n    const initialEditValues = selectedEntries.reduce((acc, entry) => {\n      acc[entry.id] = { ...entry };\n      return acc;\n    }, {});\n    setEditValues(initialEditValues);\n    console.log(\"Initial edit values:\", initialEditValues);\n  };\n\n  const handleSave = async () => {\n    console.log(\"Saving edited entries:\", editValues);\n\n    const formattedEditValues = Object.values(editValues).map((entry) => {\n      if (entry.date) {\n        entry.date = formatDateForMySQL(entry.date);\n      }\n      if (entry.birthdate) {\n        entry.birthdate = formatDateForMySQL(entry.birthdate);\n      }\n      if (entry.created_at) {\n        entry.created_at = formatDateForMySQL(entry.created_at);\n      }\n      return entry;\n    });\n\n    console.log(\"Formatted edited entries:\", formattedEditValues);\n\n    const promises = formattedEditValues.map((entry) => {\n      console.log(`Updating entry with ID ${entry.id}`, entry); // Debug log\n      const { id, user_id, ...editableFields } = entry; // Exclude id and user_id from editable fields\n      return axios\n        .put(\n          `http://localhost:3000/${selectedTable}/${entry.id}`,\n          editableFields,\n          {\n            headers: { \"Content-Type\": \"application/json\" },\n          }\n        )\n        .then((response) => {\n          console.log(\"Response:\", response);\n          // Update localStorage\n          setOfficeScreenContent((prevContent) => {\n            const savedContent = localStorage.getItem(\"officeScreenContent\");\n            const parsedContent = savedContent ? JSON.parse(savedContent) : [];\n            const updatedContent = parsedContent.map((item) => {\n              if (item.id === entry.id && item.table === selectedTable) {\n                return { ...item, ...editableFields };\n              }\n              return item;\n            });\n            localStorage.setItem(\n              \"officeScreenContent\",\n              JSON.stringify(updatedContent)\n            );\n            return updatedContent;\n          });\n        })\n        .catch((error) => {\n          console.error(\n            \"Error:\",\n            error.response ? error.response.data : error.message\n          );\n        });\n    });\n\n    try {\n      await Promise.all(promises);\n      setSuccessMessage(\"Oppdatering vellykket\");\n      setEditing(false);\n      fetchTableData(selectedTable);\n      setSelectedEntries([]);\n      setEditValues({});\n    } catch (error) {\n      console.error(\"Error updating selected entries:\", error);\n      console.error(\"Server response:\", error.response); // Additional log\n      setSuccessMessage(\"Failed to update selected entries.\");\n    }\n  };\n\n  useEffect(() => {\n    setShowButtons(selectedTable !== \"\");\n    console.log(\"Selected table:\", selectedTable);\n\n    const longestOptionTextWidth = Math.max(\n      ...Array.from(selectRef.current.options).map(\n        (option) => option.text.length * 8\n      )\n    );\n    selectRef.current.style.width = `${longestOptionTextWidth + 40}px`;\n  }, [selectedTable]);\n\n  const buttonStyle = {\n    backgroundColor: \"#242f45\",\n    color: \"white\",\n    border: \"none\",\n    borderRadius: \"4px\",\n    padding: \"10px 20px\",\n    cursor: \"pointer\",\n    fontWeight: \"bold\",\n    marginTop: \"20px\",\n    marginRight: \"10px\",\n    transition: \"all 0.3s ease\",\n  };\n\n  const handleMouseEnter = (setButtonStyle) => {\n    setButtonStyle((prevStyle) => ({\n      ...prevStyle,\n      backgroundColor: \"#242f45\",\n      color: \"white\",\n      boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.3)\",\n      transform: \"scale(1.05)\",\n    }));\n  };\n\n  const handleEditChange = (id, key, value) => {\n    console.log(`Editing value for entry ${id} - ${key}: ${value}`);\n    setEditValues((prevValues) => ({\n      ...prevValues,\n      [id]: {\n        ...prevValues[id],\n        [key]: value,\n      },\n    }));\n  };\n\n  return (\n    <div className=\"view-content-wrapper\">\n      <h1>Legg til innhold som skal vises på skjermen</h1>\n      <label htmlFor=\"table-select\"></label>\n      <select\n        id=\"table-select\"\n        ref={selectRef}\n        value={selectedTable}\n        onChange={handleTableChange}\n      >\n        <option value=\"\">Velg innhold...</option>\n        <option value=\"users\">Brukere</option>\n        <option value=\"comments\">Beskjeder</option>\n        <option value=\"events\">Arrangementer</option>\n        <option value=\"canteenMenu\">Kantinemeny</option>\n      </select>\n      <div>\n        <h2 style={{ marginBottom: \"20px\" }}>\n          Innhold fra {tableNames[selectedTable] || \"\"}\n        </h2>\n        {tableData.length > 0 && (\n          <table\n            style={{\n              width: \"100%\",\n              borderCollapse: \"collapse\",\n              textAlign: \"left\",\n            }}\n          >\n            <thead>\n              <tr>\n                <th>Select</th>\n                {Object.keys(tableData[0]).map(\n                  (key) =>\n                    key !== \"picture\" && (\n                      <th key={key}>\n                        {key.charAt(0).toUpperCase() + key.slice(1)}\n                      </th>\n                    )\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              {tableData.map((entry, index) => (\n                <tr\n                  key={index}\n                  style={{\n                    backgroundColor:\n                      index % 2 === 0 ? \"rgba(227, 213, 202, 0.6)\" : \"#3b4d70\",\n                    color: index % 2 === 0 ? \"black\" : \"white\",\n                  }}\n                >\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      id={`checkbox-${index}`}\n                      name={`checkbox-${index}`}\n                      checked={selectedEntries.includes(entry)}\n                      onChange={() => handleCheckboxChange(entry)}\n                    />\n                  </td>\n                  {Object.keys(tableData[0]).map(\n                    (key) =>\n                      key !== \"picture\" && (\n                        <td key={key}>\n                          {editing && selectedEntries.includes(entry) ? (\n                            <input\n                              type=\"text\"\n                              value={editValues[entry.id]?.[key] ?? entry[key]}\n                              onChange={(e) =>\n                                handleEditChange(entry.id, key, e.target.value)\n                              }\n                              disabled={key === \"id\" || key === \"user_id\"}\n                            />\n                          ) : key === \"date\" || key === \"birthdate\" ? (\n                            formatDate(entry[key])\n                          ) : (\n                            entry[key]\n                          )}\n                        </td>\n                      )\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n      {showButtons && (\n        <>\n          {selectedTable !== \"users\" && (\n            <button\n              onClick={handleAddToScreen}\n              style={{ ...buttonStyle, ...addButtonStyle }}\n              onMouseEnter={() => handleMouseEnter(setAddButtonStyle)}\n              onMouseLeave={() => handleMouseLeave(setAddButtonStyle)}\n              disabled={selectedEntries.length === 0} // Disable if no entries selected\n            >\n              Legg til skjerm\n            </button>\n          )}\n          <button\n            onClick={handleDeleteSelected}\n            style={{ ...buttonStyle, ...deleteButtonStyle }}\n            onMouseEnter={() => handleMouseEnter(setDeleteButtonStyle)}\n            onMouseLeave={() => handleMouseLeave(setDeleteButtonStyle)}\n            disabled={selectedEntries.length === 0} // Disable if no entries selected\n          >\n            Slett\n          </button>\n          {!editing ? (\n            <button\n              onClick={handleEdit}\n              style={{ ...buttonStyle, ...editButtonStyle }}\n              onMouseEnter={() => handleMouseEnter(setEditButtonStyle)}\n              onMouseLeave={() => handleMouseLeave(setEditButtonStyle)}\n              disabled={selectedEntries.length === 0} // Disable if no entries selected\n            >\n              Rediger\n            </button>\n          ) : (\n            <button\n              onClick={handleSave}\n              style={{ ...buttonStyle, ...editButtonStyle }}\n              onMouseEnter={() => handleMouseEnter(setEditButtonStyle)}\n              onMouseLeave={() => handleMouseLeave(setEditButtonStyle)}\n            >\n              Save\n            </button>\n          )}\n        </>\n      )}\n      {successMessage && (\n        <div\n          style={{\n            backgroundColor: \"rgba(227, 213, 202, 0.2)\",\n            color: \"black\",\n            border: \"1px solid #c3e6cb\",\n            borderRadius: \"4px\",\n            padding: \"10px\",\n            marginTop: \"20px\",\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <span style={{ marginRight: \"10px\", fontSize: \"20px\" }}>\n            &#10003;\n          </span>\n          {successMessage}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewContent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}