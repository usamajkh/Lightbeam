{"ast":null,"code":"var _jsxFileName = \"/Users/soha/Desktop/lightbeam ny/src/Entur.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// List of bus stops with their IDs\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst busStops = [{\n  name: \"Nyjordet\",\n  id: \"NSR:StopPlace:5738\"\n}, {\n  name: \"Bjørnholt skole\",\n  id: \"NSR:StopPlace:5751\"\n}, {\n  name: \"Bjørnholt nedre\",\n  id: \"NSR:StopPlace:5731\"\n}, {\n  name: \"Oredalen\",\n  id: \"NSR:StopPlace:5702\"\n}];\nconst Entur = ({\n  setDepartures,\n  currentStopIndex,\n  setCurrentStopIndex\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchDepartures = async () => {\n      const query = `\n        {\n          stopPlace(id: \"${busStops[currentStopIndex].id}\") {\n            name\n            estimatedCalls(timeRange: 72100, numberOfDepartures: 20, whiteListedModes: [bus]) {\n              realtime\n              aimedArrivalTime\n              expectedArrivalTime\n              destinationDisplay {\n                frontText\n              }\n              serviceJourney {\n                journeyPattern {\n                  line {\n                    publicCode\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n      try {\n        console.log(\"Fetching data...\");\n        const response = await fetch(\"https://api.entur.io/journey-planner/v2/graphql\", {\n          method: \"POST\",\n          headers: {\n            \"ET-Client-Name\": \"your-app-name\",\n            // Replace with your app name\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        console.log(\"Fetch result:\", result);\n        if (result.errors) {\n          throw new Error(`GraphQL error! ${result.errors.map(e => e.message).join(\", \")}`);\n        }\n        if (!result.data || !result.data.stopPlace) {\n          throw new Error(\"No stopPlace data found in the response.\");\n        }\n        const filteredDepartures = result.data.stopPlace.estimatedCalls.filter(call => [\"71\", \"72\", \"77\"].includes(call.serviceJourney.journeyPattern.line.publicCode) && ![\"Bjørndal\", \"Seterbråten\"].includes(call.destinationDisplay.frontText));\n        setDepartures(filteredDepartures);\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetching error: \", err);\n      }\n    };\n    fetchDepartures();\n    const interval = setInterval(fetchDepartures, 60000); // Fetch data every 60 seconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, [currentStopIndex, setDepartures]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentStopIndex(prevIndex => prevIndex > 0 ? prevIndex - 1 : busStops.length - 1),\n        style: {\n          background: \"none\",\n          border: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/path/to/left-arrow-icon.png\",\n          alt: \"Left Arrow\",\n          style: {\n            height: \"30px\",\n            cursor: \"pointer\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: busStops[currentStopIndex].name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCurrentStopIndex(prevIndex => prevIndex < busStops.length - 1 ? prevIndex + 1 : 0),\n        style: {\n          background: \"none\",\n          border: \"none\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/path/to/right-arrow-icon.png\",\n          alt: \"Right Arrow\",\n          style: {\n            height: \"30px\",\n            cursor: \"pointer\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(Entur, \"JfhGochNIqPkY17zyDsXnSE7zLQ=\");\n_c = Entur;\nexport default Entur;\nvar _c;\n$RefreshReg$(_c, \"Entur\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","busStops","name","id","Entur","setDepartures","currentStopIndex","setCurrentStopIndex","_s","error","setError","fetchDepartures","query","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","result","json","errors","map","e","message","join","data","stopPlace","filteredDepartures","estimatedCalls","filter","call","includes","serviceJourney","journeyPattern","line","publicCode","destinationDisplay","frontText","err","interval","setInterval","clearInterval","children","style","color","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","prevIndex","length","background","border","src","alt","height","cursor","_c","$RefreshReg$"],"sources":["/Users/soha/Desktop/lightbeam ny/src/Entur.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n// List of bus stops with their IDs\nconst busStops = [\n  { name: \"Nyjordet\", id: \"NSR:StopPlace:5738\" },\n  { name: \"Bjørnholt skole\", id: \"NSR:StopPlace:5751\" },\n  { name: \"Bjørnholt nedre\", id: \"NSR:StopPlace:5731\" },\n  { name: \"Oredalen\", id: \"NSR:StopPlace:5702\" },\n];\n\nconst Entur = ({ setDepartures, currentStopIndex, setCurrentStopIndex }) => {\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchDepartures = async () => {\n      const query = `\n        {\n          stopPlace(id: \"${busStops[currentStopIndex].id}\") {\n            name\n            estimatedCalls(timeRange: 72100, numberOfDepartures: 20, whiteListedModes: [bus]) {\n              realtime\n              aimedArrivalTime\n              expectedArrivalTime\n              destinationDisplay {\n                frontText\n              }\n              serviceJourney {\n                journeyPattern {\n                  line {\n                    publicCode\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n\n      try {\n        console.log(\"Fetching data...\");\n        const response = await fetch(\n          \"https://api.entur.io/journey-planner/v2/graphql\",\n          {\n            method: \"POST\",\n            headers: {\n              \"ET-Client-Name\": \"your-app-name\", // Replace with your app name\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ query }),\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log(\"Fetch result:\", result);\n\n        if (result.errors) {\n          throw new Error(\n            `GraphQL error! ${result.errors.map((e) => e.message).join(\", \")}`\n          );\n        }\n\n        if (!result.data || !result.data.stopPlace) {\n          throw new Error(\"No stopPlace data found in the response.\");\n        }\n\n        const filteredDepartures = result.data.stopPlace.estimatedCalls.filter(\n          (call) =>\n            [\"71\", \"72\", \"77\"].includes(\n              call.serviceJourney.journeyPattern.line.publicCode\n            ) &&\n            ![\"Bjørndal\", \"Seterbråten\"].includes(\n              call.destinationDisplay.frontText\n            )\n        );\n\n        setDepartures(filteredDepartures);\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetching error: \", err);\n      }\n    };\n\n    fetchDepartures();\n    const interval = setInterval(fetchDepartures, 60000); // Fetch data every 60 seconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, [currentStopIndex, setDepartures]);\n\n  return (\n    <div>\n      {error && <p style={{ color: \"red\" }}>{error}</p>}\n      <div className=\"header\">\n        <button\n          onClick={() =>\n            setCurrentStopIndex((prevIndex) =>\n              prevIndex > 0 ? prevIndex - 1 : busStops.length - 1\n            )\n          }\n          style={{ background: \"none\", border: \"none\" }}\n        >\n          <img\n            src=\"/path/to/left-arrow-icon.png\"\n            alt=\"Left Arrow\"\n            style={{ height: \"30px\", cursor: \"pointer\" }}\n          />\n        </button>\n        <h1>{busStops[currentStopIndex].name}</h1>\n        <button\n          onClick={() =>\n            setCurrentStopIndex((prevIndex) =>\n              prevIndex < busStops.length - 1 ? prevIndex + 1 : 0\n            )\n          }\n          style={{ background: \"none\", border: \"none\" }}\n        >\n          <img\n            src=\"/path/to/right-arrow-icon.png\"\n            alt=\"Right Arrow\"\n            style={{ height: \"30px\", cursor: \"pointer\" }}\n          />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Entur;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}