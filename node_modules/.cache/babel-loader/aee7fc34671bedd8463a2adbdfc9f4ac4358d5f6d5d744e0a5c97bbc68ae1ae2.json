{"ast":null,"code":"var _jsxFileName = \"/Users/soha/Desktop/lightbeam ny/src/ViewContent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ViewContent = ({\n  setOfficeScreenContent\n}) => {\n  _s();\n  const [selectedTable, setSelectedTable] = useState(\"\");\n  const [tableData, setTableData] = useState([]);\n  const [selectedEntries, setSelectedEntries] = useState([]);\n  const [showButtons, setShowButtons] = useState(false); // State to control button visibility\n  const [addButtonStyle, setAddButtonStyle] = useState({});\n  const [deleteButtonStyle, setDeleteButtonStyle] = useState({});\n  const [editButtonStyle, setEditButtonStyle] = useState({});\n  const [editing, setEditing] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(\"\"); // State for success message\n  const navigate = useNavigate();\n  const selectRef = useRef(null); // Ref for select element\n\n  const tableNames = {\n    users: \"Brukere\",\n    comments: \"Beskjeder\",\n    events: \"Arrangementer\",\n    canteenMenu: \"Kantinemeny\"\n  };\n  const fetchTableData = async table => {\n    try {\n      const response = await axios.get(`http://localhost:3000/${table}`);\n      setTableData(response.data);\n    } catch (error) {\n      console.error(`Error fetching data from ${table}:`, error);\n    }\n  };\n  const handleTableChange = e => {\n    setSelectedTable(e.target.value);\n    setShowButtons(false); // Hide buttons when table changes\n    setSuccessMessage(\"\"); // Clear success message when table changes\n    setEditing(false); // Exit editing mode when table changes\n    if (e.target.value) {\n      fetchTableData(e.target.value);\n    } else {\n      setTableData([]);\n    }\n  };\n  const handleCheckboxChange = entry => {\n    setSelectedEntries(prevEntries => {\n      if (prevEntries.includes(entry)) {\n        return prevEntries.filter(e => e !== entry);\n      } else {\n        return [...prevEntries, entry];\n      }\n    });\n  };\n  const formatDate = dateString => {\n    const options = {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n  const handleAddToScreen = async () => {\n    const promises = selectedEntries.map(entry => {\n      return axios.get(`http://localhost:3000/${selectedTable}/${entry.id}`);\n    });\n    try {\n      const results = await Promise.all(promises);\n      const entriesData = results.map(result => ({\n        ...result.data,\n        table: selectedTable\n      }));\n\n      // Log the entries being added\n      console.log(\"Entries Data:\", entriesData);\n      let addedEntries = [];\n\n      // Merge new data with existing data from localStorage\n      setOfficeScreenContent(prevContent => {\n        const savedContent = localStorage.getItem(\"officeScreenContent\");\n        const parsedContent = savedContent ? JSON.parse(savedContent) : [];\n        const newContent = [...parsedContent];\n        entriesData.forEach(entry => {\n          if (!parsedContent.some(existingEntry => existingEntry.id === entry.id && existingEntry.table === entry.table)) {\n            newContent.push(entry);\n            addedEntries.push(entry);\n          }\n        });\n        console.log(\"New OfficeScreenContent:\", newContent);\n        localStorage.setItem(\"officeScreenContent\", JSON.stringify(newContent));\n        return newContent;\n      });\n      if (addedEntries.length > 0) {\n        setSuccessMessage(\"Lagt til på skjerm\");\n      } else {\n        setSuccessMessage(\"Finnes allerede på skjermnen.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data for selected entries:\", error);\n      setSuccessMessage(\"Failed to add to the screen.\");\n    }\n  };\n  const handleDeleteSelected = async () => {\n    const promises = selectedEntries.map(entry => {\n      return axios.delete(`http://localhost:3000/${selectedTable}/${entry.id}`);\n    });\n    try {\n      await Promise.all(promises);\n      setSuccessMessage(\"Slettet fra database\");\n      fetchTableData(selectedTable); // Refetch data to update UI\n      setSelectedEntries([]); // Clear selection after deletion\n    } catch (error) {\n      console.error(\"Error deleting selected entries:\", error);\n      setSuccessMessage(\"Failed to delete selected entries.\");\n    }\n  };\n  const handleEdit = () => {\n    setEditing(true);\n  };\n  const handleSave = async () => {\n    const promises = tableData.map(entry => {\n      if (selectedEntries.includes(entry)) {\n        return axios.put(`http://localhost:3000/${selectedTable}/${entry.id}`, entry);\n      }\n      return null;\n    });\n    try {\n      await Promise.all(promises.filter(Boolean));\n      setSuccessMessage(\"Oppdatering vellykket\");\n      setEditing(false);\n      fetchTableData(selectedTable); // Refetch data to update UI\n      setSelectedEntries([]); // Clear selection after editing\n    } catch (error) {\n      console.error(\"Error updating selected entries:\", error);\n      setSuccessMessage(\"Failed to update selected entries.\");\n    }\n  };\n  useEffect(() => {\n    // Show buttons only when a table is selected\n    setShowButtons(selectedTable !== \"\");\n\n    // Adjust the width of the select element based on the longest option text\n    const longestOptionTextWidth = Math.max(...Array.from(selectRef.current.options).map(option => option.text.length * 8 // Adjust the multiplier as needed\n    ));\n    selectRef.current.style.width = `${longestOptionTextWidth + 40}px`; // Add some padding\n  }, [selectedTable]);\n  const buttonStyle = {\n    backgroundColor: \"rgba(227, 213, 202, 0.2)\",\n    color: \"black\",\n    border: \"none\",\n    borderRadius: \"4px\",\n    padding: \"10px 20px\",\n    cursor: \"pointer\",\n    fontWeight: \"bold\",\n    marginTop: \"20px\",\n    marginRight: \"10px\",\n    transition: \"background-color 0.3s, color 0.3s\"\n  };\n  const handleMouseEnter = setButtonStyle => {\n    setButtonStyle({\n      backgroundColor: \"rgba(227, 213, 202, 0.6)\",\n      color: \"white\"\n    });\n  };\n  const handleMouseLeave = setButtonStyle => {\n    setButtonStyle({});\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Legg til innhold som skal vises p\\xE5 skjermen\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"table-select\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"table-select\",\n      ref: selectRef // Assign ref to select element\n      ,\n      value: selectedTable,\n      onChange: handleTableChange,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        children: \"Select...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"users\",\n        children: \"Brukere\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"comments\",\n        children: \"Beskjeder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"events\",\n        children: \"Arrangementer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"canteenMenu\",\n        children: \"Kantinemeny\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: [\"Innhold fra \", tableNames[selectedTable] || \"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), tableData.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n        style: {\n          width: \"100%\",\n          borderCollapse: \"collapse\",\n          textAlign: \"left\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this), Object.keys(tableData[0]).map(key => key !== \"picture\" && /*#__PURE__*/_jsxDEV(\"th\", {\n              children: key.charAt(0).toUpperCase() + key.slice(1)\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableData.map((entry, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            style: {\n              backgroundColor: index % 2 === 0 ? \"rgba(227, 213, 202, 0.2)\" : \"transparent\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                id: `checkbox-${index}`,\n                name: `checkbox-${index}`,\n                checked: selectedEntries.includes(entry),\n                onChange: () => handleCheckboxChange(entry)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 19\n            }, this), Object.keys(tableData[0]).map(key => key !== \"picture\" && /*#__PURE__*/_jsxDEV(\"td\", {\n              children: editing && selectedEntries.includes(entry) ? /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: entry[key] !== undefined ? entry[key] : \"N/A\",\n                onChange: e => setTableData(prevData => prevData.map((item, idx) => idx === index ? {\n                  ...item,\n                  [key]: e.target.value\n                } : item)),\n                disabled: key === \"id\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 29\n              }, this) : entry[key] !== undefined ? key === \"date\" || key === \"birthdate\" ? formatDate(entry[key]) : entry[key] : \"N/A\"\n            }, key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 25\n            }, this))]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), showButtons && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddToScreen,\n        style: {\n          ...buttonStyle,\n          ...addButtonStyle\n        },\n        onMouseEnter: () => handleMouseEnter(setAddButtonStyle),\n        onMouseLeave: () => handleMouseLeave(setAddButtonStyle),\n        children: \"Legg til\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDeleteSelected,\n        style: {\n          ...buttonStyle,\n          ...deleteButtonStyle\n        },\n        onMouseEnter: () => handleMouseEnter(setDeleteButtonStyle),\n        onMouseLeave: () => handleMouseLeave(setDeleteButtonStyle),\n        children: \"Slett\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this), !editing ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleEdit,\n        style: {\n          ...buttonStyle,\n          ...editButtonStyle\n        },\n        onMouseEnter: () => handleMouseEnter(setEditButtonStyle),\n        onMouseLeave: () => handleMouseLeave(setEditButtonStyle),\n        children: \"Rediger\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSave,\n        style: {\n          ...buttonStyle,\n          ...editButtonStyle\n        },\n        onMouseEnter: () => handleMouseEnter(setEditButtonStyle),\n        onMouseLeave: () => handleMouseLeave(setEditButtonStyle),\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: \"rgba(227, 213, 202, 0.2)\",\n        color: \"black\",\n        border: \"1px solid #c3e6cb\",\n        borderRadius: \"4px\",\n        padding: \"10px\",\n        marginTop: \"20px\",\n        fontSize: \"16px\",\n        fontWeight: \"bold\",\n        display: \"inline-flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          marginRight: \"10px\",\n          fontSize: \"20px\"\n        },\n        children: \"\\u2713\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this), successMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n};\n_s(ViewContent, \"gttltTBsc23x1RbzG1km7I8jaaE=\", false, function () {\n  return [useNavigate];\n});\n_c = ViewContent;\nexport default ViewContent;\nvar _c;\n$RefreshReg$(_c, \"ViewContent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ViewContent","setOfficeScreenContent","_s","selectedTable","setSelectedTable","tableData","setTableData","selectedEntries","setSelectedEntries","showButtons","setShowButtons","addButtonStyle","setAddButtonStyle","deleteButtonStyle","setDeleteButtonStyle","editButtonStyle","setEditButtonStyle","editing","setEditing","successMessage","setSuccessMessage","navigate","selectRef","tableNames","users","comments","events","canteenMenu","fetchTableData","table","response","get","data","error","console","handleTableChange","e","target","value","handleCheckboxChange","entry","prevEntries","includes","filter","formatDate","dateString","options","year","month","day","Date","toLocaleDateString","undefined","handleAddToScreen","promises","map","id","results","Promise","all","entriesData","result","log","addedEntries","prevContent","savedContent","localStorage","getItem","parsedContent","JSON","parse","newContent","forEach","some","existingEntry","push","setItem","stringify","length","handleDeleteSelected","delete","handleEdit","handleSave","put","Boolean","longestOptionTextWidth","Math","max","Array","from","current","option","text","style","width","buttonStyle","backgroundColor","color","border","borderRadius","padding","cursor","fontWeight","marginTop","marginRight","transition","handleMouseEnter","setButtonStyle","handleMouseLeave","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","ref","onChange","marginBottom","borderCollapse","textAlign","Object","keys","key","charAt","toUpperCase","slice","index","type","name","checked","prevData","item","idx","disabled","onClick","onMouseEnter","onMouseLeave","fontSize","display","alignItems","justifyContent","_c","$RefreshReg$"],"sources":["/Users/soha/Desktop/lightbeam ny/src/ViewContent.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./index.css\";\n\nconst ViewContent = ({ setOfficeScreenContent }) => {\n  const [selectedTable, setSelectedTable] = useState(\"\");\n  const [tableData, setTableData] = useState([]);\n  const [selectedEntries, setSelectedEntries] = useState([]);\n  const [showButtons, setShowButtons] = useState(false); // State to control button visibility\n  const [addButtonStyle, setAddButtonStyle] = useState({});\n  const [deleteButtonStyle, setDeleteButtonStyle] = useState({});\n  const [editButtonStyle, setEditButtonStyle] = useState({});\n  const [editing, setEditing] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(\"\"); // State for success message\n  const navigate = useNavigate();\n  const selectRef = useRef(null); // Ref for select element\n\n  const tableNames = {\n    users: \"Brukere\",\n    comments: \"Beskjeder\",\n    events: \"Arrangementer\",\n    canteenMenu: \"Kantinemeny\",\n  };\n\n  const fetchTableData = async (table) => {\n    try {\n      const response = await axios.get(`http://localhost:3000/${table}`);\n      setTableData(response.data);\n    } catch (error) {\n      console.error(`Error fetching data from ${table}:`, error);\n    }\n  };\n\n  const handleTableChange = (e) => {\n    setSelectedTable(e.target.value);\n    setShowButtons(false); // Hide buttons when table changes\n    setSuccessMessage(\"\"); // Clear success message when table changes\n    setEditing(false); // Exit editing mode when table changes\n    if (e.target.value) {\n      fetchTableData(e.target.value);\n    } else {\n      setTableData([]);\n    }\n  };\n\n  const handleCheckboxChange = (entry) => {\n    setSelectedEntries((prevEntries) => {\n      if (prevEntries.includes(entry)) {\n        return prevEntries.filter((e) => e !== entry);\n      } else {\n        return [...prevEntries, entry];\n      }\n    });\n  };\n\n  const formatDate = (dateString) => {\n    const options = {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\",\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  const handleAddToScreen = async () => {\n    const promises = selectedEntries.map((entry) => {\n      return axios.get(`http://localhost:3000/${selectedTable}/${entry.id}`);\n    });\n\n    try {\n      const results = await Promise.all(promises);\n      const entriesData = results.map((result) => ({\n        ...result.data,\n        table: selectedTable,\n      }));\n\n      // Log the entries being added\n      console.log(\"Entries Data:\", entriesData);\n\n      let addedEntries = [];\n\n      // Merge new data with existing data from localStorage\n      setOfficeScreenContent((prevContent) => {\n        const savedContent = localStorage.getItem(\"officeScreenContent\");\n        const parsedContent = savedContent ? JSON.parse(savedContent) : [];\n        const newContent = [...parsedContent];\n\n        entriesData.forEach((entry) => {\n          if (\n            !parsedContent.some(\n              (existingEntry) =>\n                existingEntry.id === entry.id &&\n                existingEntry.table === entry.table\n            )\n          ) {\n            newContent.push(entry);\n            addedEntries.push(entry);\n          }\n        });\n\n        console.log(\"New OfficeScreenContent:\", newContent);\n        localStorage.setItem(\"officeScreenContent\", JSON.stringify(newContent));\n        return newContent;\n      });\n\n      if (addedEntries.length > 0) {\n        setSuccessMessage(\"Lagt til på skjerm\");\n      } else {\n        setSuccessMessage(\"Finnes allerede på skjermnen.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching data for selected entries:\", error);\n      setSuccessMessage(\"Failed to add to the screen.\");\n    }\n  };\n\n  const handleDeleteSelected = async () => {\n    const promises = selectedEntries.map((entry) => {\n      return axios.delete(`http://localhost:3000/${selectedTable}/${entry.id}`);\n    });\n\n    try {\n      await Promise.all(promises);\n      setSuccessMessage(\"Slettet fra database\");\n      fetchTableData(selectedTable); // Refetch data to update UI\n      setSelectedEntries([]); // Clear selection after deletion\n    } catch (error) {\n      console.error(\"Error deleting selected entries:\", error);\n      setSuccessMessage(\"Failed to delete selected entries.\");\n    }\n  };\n\n  const handleEdit = () => {\n    setEditing(true);\n  };\n\n  const handleSave = async () => {\n    const promises = tableData.map((entry) => {\n      if (selectedEntries.includes(entry)) {\n        return axios.put(\n          `http://localhost:3000/${selectedTable}/${entry.id}`,\n          entry\n        );\n      }\n      return null;\n    });\n\n    try {\n      await Promise.all(promises.filter(Boolean));\n      setSuccessMessage(\"Oppdatering vellykket\");\n      setEditing(false);\n      fetchTableData(selectedTable); // Refetch data to update UI\n      setSelectedEntries([]); // Clear selection after editing\n    } catch (error) {\n      console.error(\"Error updating selected entries:\", error);\n      setSuccessMessage(\"Failed to update selected entries.\");\n    }\n  };\n\n  useEffect(() => {\n    // Show buttons only when a table is selected\n    setShowButtons(selectedTable !== \"\");\n\n    // Adjust the width of the select element based on the longest option text\n    const longestOptionTextWidth = Math.max(\n      ...Array.from(selectRef.current.options).map(\n        (option) => option.text.length * 8 // Adjust the multiplier as needed\n      )\n    );\n    selectRef.current.style.width = `${longestOptionTextWidth + 40}px`; // Add some padding\n  }, [selectedTable]);\n\n  const buttonStyle = {\n    backgroundColor: \"rgba(227, 213, 202, 0.2)\",\n    color: \"black\",\n    border: \"none\",\n    borderRadius: \"4px\",\n    padding: \"10px 20px\",\n    cursor: \"pointer\",\n    fontWeight: \"bold\",\n    marginTop: \"20px\",\n    marginRight: \"10px\",\n    transition: \"background-color 0.3s, color 0.3s\",\n  };\n\n  const handleMouseEnter = (setButtonStyle) => {\n    setButtonStyle({\n      backgroundColor: \"rgba(227, 213, 202, 0.6)\",\n      color: \"white\",\n    });\n  };\n\n  const handleMouseLeave = (setButtonStyle) => {\n    setButtonStyle({});\n  };\n\n  return (\n    <div>\n      <h1>Legg til innhold som skal vises på skjermen</h1>\n      <label htmlFor=\"table-select\"></label>\n      <select\n        id=\"table-select\"\n        ref={selectRef} // Assign ref to select element\n        value={selectedTable}\n        onChange={handleTableChange}\n      >\n        <option value=\"\">Select...</option>\n        <option value=\"users\">Brukere</option>\n        <option value=\"comments\">Beskjeder</option>\n        <option value=\"events\">Arrangementer</option>\n        <option value=\"canteenMenu\">Kantinemeny</option>\n      </select>\n      <div>\n        <h2 style={{ marginBottom: \"20px\" }}>\n          Innhold fra {tableNames[selectedTable] || \"\"}\n        </h2>\n        {tableData.length > 0 && (\n          <table\n            style={{\n              width: \"100%\",\n              borderCollapse: \"collapse\",\n              textAlign: \"left\",\n            }}\n          >\n            <thead>\n              <tr>\n                <th>Select</th>\n                {Object.keys(tableData[0]).map(\n                  (key) =>\n                    key !== \"picture\" && (\n                      <th key={key}>\n                        {key.charAt(0).toUpperCase() + key.slice(1)}\n                      </th>\n                    )\n                )}\n              </tr>\n            </thead>\n            <tbody>\n              {tableData.map((entry, index) => (\n                <tr\n                  key={index}\n                  style={{\n                    backgroundColor:\n                      index % 2 === 0\n                        ? \"rgba(227, 213, 202, 0.2)\"\n                        : \"transparent\",\n                  }}\n                >\n                  <td>\n                    <input\n                      type=\"checkbox\"\n                      id={`checkbox-${index}`}\n                      name={`checkbox-${index}`}\n                      checked={selectedEntries.includes(entry)}\n                      onChange={() => handleCheckboxChange(entry)}\n                    />\n                  </td>\n                  {Object.keys(tableData[0]).map(\n                    (key) =>\n                      key !== \"picture\" && (\n                        <td key={key}>\n                          {editing && selectedEntries.includes(entry) ? (\n                            <input\n                              type=\"text\"\n                              value={\n                                entry[key] !== undefined ? entry[key] : \"N/A\"\n                              }\n                              onChange={(e) =>\n                                setTableData((prevData) =>\n                                  prevData.map((item, idx) =>\n                                    idx === index\n                                      ? { ...item, [key]: e.target.value }\n                                      : item\n                                  )\n                                )\n                              }\n                              disabled={key === \"id\"}\n                            />\n                          ) : entry[key] !== undefined ? (\n                            key === \"date\" || key === \"birthdate\" ? (\n                              formatDate(entry[key])\n                            ) : (\n                              entry[key]\n                            )\n                          ) : (\n                            \"N/A\"\n                          )}\n                        </td>\n                      )\n                  )}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n      {showButtons && (\n        <>\n          <button\n            onClick={handleAddToScreen}\n            style={{ ...buttonStyle, ...addButtonStyle }}\n            onMouseEnter={() => handleMouseEnter(setAddButtonStyle)}\n            onMouseLeave={() => handleMouseLeave(setAddButtonStyle)}\n          >\n            Legg til\n          </button>\n          <button\n            onClick={handleDeleteSelected}\n            style={{ ...buttonStyle, ...deleteButtonStyle }}\n            onMouseEnter={() => handleMouseEnter(setDeleteButtonStyle)}\n            onMouseLeave={() => handleMouseLeave(setDeleteButtonStyle)}\n          >\n            Slett\n          </button>\n          {!editing ? (\n            <button\n              onClick={handleEdit}\n              style={{ ...buttonStyle, ...editButtonStyle }}\n              onMouseEnter={() => handleMouseEnter(setEditButtonStyle)}\n              onMouseLeave={() => handleMouseLeave(setEditButtonStyle)}\n            >\n              Rediger\n            </button>\n          ) : (\n            <button\n              onClick={handleSave}\n              style={{ ...buttonStyle, ...editButtonStyle }}\n              onMouseEnter={() => handleMouseEnter(setEditButtonStyle)}\n              onMouseLeave={() => handleMouseLeave(setEditButtonStyle)}\n            >\n              Save\n            </button>\n          )}\n        </>\n      )}\n      {successMessage && (\n        <div\n          style={{\n            backgroundColor: \"rgba(227, 213, 202, 0.2)\",\n            color: \"black\",\n            border: \"1px solid #c3e6cb\",\n            borderRadius: \"4px\",\n            padding: \"10px\",\n            marginTop: \"20px\",\n            fontSize: \"16px\",\n            fontWeight: \"bold\",\n            display: \"inline-flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          <span style={{ marginRight: \"10px\", fontSize: \"20px\" }}>\n            &#10003;\n          </span>\n          {successMessage}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewContent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}