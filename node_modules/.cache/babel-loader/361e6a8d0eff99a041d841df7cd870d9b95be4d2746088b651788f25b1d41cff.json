{"ast":null,"code":"var _jsxFileName = \"/Users/soha/lightbeam/src/OfficeScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport screenfull from \"screenfull\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OfficeScreen = ({\n  officeScreenContent\n}) => {\n  _s();\n  const [showButton, setShowButton] = useState(true);\n  const [editMode, setEditMode] = useState(false);\n  const [checkedItems, setCheckedItems] = useState({});\n  useEffect(() => {\n    if (screenfull.isEnabled) {\n      const changeHandler = () => {\n        setShowButton(!screenfull.isFullscreen);\n      };\n      screenfull.on(\"change\", changeHandler);\n      return () => {\n        screenfull.off(\"change\", changeHandler);\n      };\n    }\n  }, []);\n  const formatDate = dateString => {\n    const options = {\n      year: \"numeric\",\n      month: \"2-digit\",\n      day: \"2-digit\"\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n  const renderEntry = (entry, index) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [editMode && /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: checkedItems[index] || false,\n        onChange: () => toggleSelection(index)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), Object.entries(entry).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [key.charAt(0).toUpperCase() + key.slice(1), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), \" \", key === \"date\" || key === \"birthdate\" ? formatDate(value) : value]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleFullscreen = () => {\n    screenfull.toggle();\n  };\n  const toggleEditMode = () => {\n    setEditMode(!editMode);\n    setCheckedItems({}); // Clear selections when toggling edit mode\n  };\n  const toggleSelection = index => {\n    setCheckedItems(prevChecked => ({\n      ...prevChecked,\n      [index]: !prevChecked[index]\n    }));\n  };\n  const removeSelectedItems = () => {\n    const updatedContent = officeScreenContent.filter((_, index) => !checkedItems[index]);\n    // Here, you would update your state/local storage with 'updatedContent'\n    console.log(\"Items to remove:\", selectedItems);\n    console.log(\"Updated content:\", updatedContent);\n    setCheckedItems({});\n    setEditMode(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showButton && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fullscreen-button-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleFullscreen,\n        children: screenfull.isFullscreen ? \"Exit Fullscreen\" : \"Enter Fullscreen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this), !screenfull.isFullscreen && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleEditMode,\n        children: editMode ? \"Cancel Edit\" : \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `signage-layout ${screenfull.isFullscreen ? \"fullscreen\" : \"\"}`,\n      children: editMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: removeSelectedItems,\n        children: \"Remove Selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(OfficeScreen, \"QAxw/F7yfPHGeX0xYtyF0feh8Rc=\");\n_c = OfficeScreen;\nexport default OfficeScreen;\nvar _c;\n$RefreshReg$(_c, \"OfficeScreen\");","map":{"version":3,"names":["React","useState","useEffect","screenfull","jsxDEV","_jsxDEV","OfficeScreen","officeScreenContent","_s","showButton","setShowButton","editMode","setEditMode","checkedItems","setCheckedItems","isEnabled","changeHandler","isFullscreen","on","off","formatDate","dateString","options","year","month","day","Date","toLocaleDateString","undefined","renderEntry","entry","index","children","type","checked","onChange","toggleSelection","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","key","value","charAt","toUpperCase","slice","toggleFullscreen","toggle","toggleEditMode","prevChecked","removeSelectedItems","updatedContent","filter","_","console","log","selectedItems","className","onClick","_c","$RefreshReg$"],"sources":["/Users/soha/lightbeam/src/OfficeScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport screenfull from \"screenfull\";\n\nconst OfficeScreen = ({ officeScreenContent }) => {\n  const [showButton, setShowButton] = useState(true);\n  const [editMode, setEditMode] = useState(false);\n  const [checkedItems, setCheckedItems] = useState({});\n\n  useEffect(() => {\n    if (screenfull.isEnabled) {\n      const changeHandler = () => {\n        setShowButton(!screenfull.isFullscreen);\n      };\n\n      screenfull.on(\"change\", changeHandler);\n\n      return () => {\n        screenfull.off(\"change\", changeHandler);\n      };\n    }\n  }, []);\n\n  const formatDate = (dateString) => {\n    const options = { year: \"numeric\", month: \"2-digit\", day: \"2-digit\" };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n\n  const renderEntry = (entry, index) => {\n    return (\n      <div key={index}>\n        {editMode && (\n          <input\n            type=\"checkbox\"\n            checked={checkedItems[index] || false}\n            onChange={() => toggleSelection(index)}\n          />\n        )}\n        {Object.entries(entry).map(([key, value]) => (\n          <p key={key}>\n            <strong>{key.charAt(0).toUpperCase() + key.slice(1)}:</strong>{\" \"}\n            {key === \"date\" || key === \"birthdate\" ? formatDate(value) : value}\n          </p>\n        ))}\n      </div>\n    );\n  };\n\n  const toggleFullscreen = () => {\n    screenfull.toggle();\n  };\n\n  const toggleEditMode = () => {\n    setEditMode(!editMode);\n    setCheckedItems({}); // Clear selections when toggling edit mode\n  };\n\n  const toggleSelection = (index) => {\n    setCheckedItems((prevChecked) => ({\n      ...prevChecked,\n      [index]: !prevChecked[index],\n    }));\n  };\n\n  const removeSelectedItems = () => {\n    const updatedContent = officeScreenContent.filter(\n      (_, index) => !checkedItems[index]\n    );\n    // Here, you would update your state/local storage with 'updatedContent'\n    console.log(\"Items to remove:\", selectedItems);\n    console.log(\"Updated content:\", updatedContent);\n\n    setCheckedItems({});\n    setEditMode(false);\n  };\n\n  return (\n    <div>\n      {showButton && (\n        <div className=\"fullscreen-button-container\">\n          <button onClick={toggleFullscreen}>\n            {screenfull.isFullscreen ? \"Exit Fullscreen\" : \"Enter Fullscreen\"}\n          </button>\n          {!screenfull.isFullscreen && (\n            <button onClick={toggleEditMode}>\n              {editMode ? \"Cancel Edit\" : \"Edit\"}\n            </button>\n          )}\n        </div>\n      )}\n\n      <div\n        className={`signage-layout ${\n          screenfull.isFullscreen ? \"fullscreen\" : \"\"\n        }`}\n      >\n        {/* ... your signage content (events, meetings, etc.) here ... */}\n        {editMode && (\n          <button onClick={removeSelectedItems}>Remove Selected</button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default OfficeScreen;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EAChD,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEpDC,SAAS,CAAC,MAAM;IACd,IAAIC,UAAU,CAACY,SAAS,EAAE;MACxB,MAAMC,aAAa,GAAGA,CAAA,KAAM;QAC1BN,aAAa,CAAC,CAACP,UAAU,CAACc,YAAY,CAAC;MACzC,CAAC;MAEDd,UAAU,CAACe,EAAE,CAAC,QAAQ,EAAEF,aAAa,CAAC;MAEtC,OAAO,MAAM;QACXb,UAAU,CAACgB,GAAG,CAAC,QAAQ,EAAEH,aAAa,CAAC;MACzC,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,UAAU,GAAIC,UAAU,IAAK;IACjC,MAAMC,OAAO,GAAG;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE,SAAS;MAAEC,GAAG,EAAE;IAAU,CAAC;IACrE,OAAO,IAAIC,IAAI,CAACL,UAAU,CAAC,CAACM,kBAAkB,CAACC,SAAS,EAAEN,OAAO,CAAC;EACpE,CAAC;EAED,MAAMO,WAAW,GAAGA,CAACC,KAAK,EAAEC,KAAK,KAAK;IACpC,oBACE1B,OAAA;MAAA2B,QAAA,GACGrB,QAAQ,iBACPN,OAAA;QACE4B,IAAI,EAAC,UAAU;QACfC,OAAO,EAAErB,YAAY,CAACkB,KAAK,CAAC,IAAI,KAAM;QACtCI,QAAQ,EAAEA,CAAA,KAAMC,eAAe,CAACL,KAAK;MAAE;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC,CACF,EACAC,MAAM,CAACC,OAAO,CAACZ,KAAK,CAAC,CAACa,GAAG,CAAC,CAAC,CAACC,GAAG,EAAEC,KAAK,CAAC,kBACtCxC,OAAA;QAAA2B,QAAA,gBACE3B,OAAA;UAAA2B,QAAA,GAASY,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGH,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC,EAAC,GAAC;QAAA;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EAAC,GAAG,EACjEI,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,WAAW,GAAGxB,UAAU,CAACyB,KAAK,CAAC,GAAGA,KAAK;MAAA,GAF5DD,GAAG;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGR,CACJ,CAAC;IAAA,GAbMT,KAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAcV,CAAC;EAEV,CAAC;EAED,MAAMS,gBAAgB,GAAGA,CAAA,KAAM;IAC7B9C,UAAU,CAAC+C,MAAM,CAAC,CAAC;EACrB,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3BvC,WAAW,CAAC,CAACD,QAAQ,CAAC;IACtBG,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,MAAMsB,eAAe,GAAIL,KAAK,IAAK;IACjCjB,eAAe,CAAEsC,WAAW,KAAM;MAChC,GAAGA,WAAW;MACd,CAACrB,KAAK,GAAG,CAACqB,WAAW,CAACrB,KAAK;IAC7B,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMsB,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,cAAc,GAAG/C,mBAAmB,CAACgD,MAAM,CAC/C,CAACC,CAAC,EAAEzB,KAAK,KAAK,CAAClB,YAAY,CAACkB,KAAK,CACnC,CAAC;IACD;IACA0B,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,aAAa,CAAC;IAC9CF,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEJ,cAAc,CAAC;IAE/CxC,eAAe,CAAC,CAAC,CAAC,CAAC;IACnBF,WAAW,CAAC,KAAK,CAAC;EACpB,CAAC;EAED,oBACEP,OAAA;IAAA2B,QAAA,GACGvB,UAAU,iBACTJ,OAAA;MAAKuD,SAAS,EAAC,6BAA6B;MAAA5B,QAAA,gBAC1C3B,OAAA;QAAQwD,OAAO,EAAEZ,gBAAiB;QAAAjB,QAAA,EAC/B7B,UAAU,CAACc,YAAY,GAAG,iBAAiB,GAAG;MAAkB;QAAAoB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3D,CAAC,EACR,CAACrC,UAAU,CAACc,YAAY,iBACvBZ,OAAA;QAAQwD,OAAO,EAAEV,cAAe;QAAAnB,QAAA,EAC7BrB,QAAQ,GAAG,aAAa,GAAG;MAAM;QAAA0B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN,eAEDnC,OAAA;MACEuD,SAAS,EAAE,kBACTzD,UAAU,CAACc,YAAY,GAAG,YAAY,GAAG,EAAE,EAC1C;MAAAe,QAAA,EAGFrB,QAAQ,iBACPN,OAAA;QAAQwD,OAAO,EAAER,mBAAoB;QAAArB,QAAA,EAAC;MAAe;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAC9D;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChC,EAAA,CAnGIF,YAAY;AAAAwD,EAAA,GAAZxD,YAAY;AAqGlB,eAAeA,YAAY;AAAC,IAAAwD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}