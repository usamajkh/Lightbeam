{"ast":null,"code":"var _jsxFileName = \"/Users/soha/Desktop/lightbeam ny/src/Entur.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Entur = ({\n  setDepartures\n}) => {\n  _s();\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchDepartures = async () => {\n      const query = `\n        {\n          stopPlace(id: \"NSR:StopPlace:58381\") {\n            name\n            estimatedCalls(timeRange: 72100, numberOfDepartures: 20, whiteListedModes: [metro]) {\n              realtime\n              aimedArrivalTime\n              expectedArrivalTime\n              destinationDisplay {\n                frontText\n              }\n              serviceJourney {\n                journeyPattern {\n                  line {\n                    publicCode\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n      try {\n        console.log(\"Fetching data...\");\n        const response = await fetch(\"https://api.entur.io/journey-planner/v2/graphql\", {\n          method: \"POST\",\n          headers: {\n            \"ET-Client-Name\": \"your-app-name\",\n            // Replace with your app name\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify({\n            query\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n        const result = await response.json();\n        console.log(\"Fetch result:\", result);\n        console.log(\"stopPlace data:\", result.data.stopPlace);\n        if (result.errors) {\n          throw new Error(`GraphQL error! ${result.errors.map(e => e.message).join(\", \")}`);\n        }\n        setDepartures(result.data.stopPlace.estimatedCalls);\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetching error: \", err);\n      }\n    };\n    fetchDepartures();\n    const interval = setInterval(fetchDepartures, 60000); // Fetch data every 60 seconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, [setDepartures]);\n  return error && /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      color: \"red\"\n    },\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 19\n  }, this);\n};\n_s(Entur, \"JfhGochNIqPkY17zyDsXnSE7zLQ=\");\n_c = Entur;\nexport default Entur;\nvar _c;\n$RefreshReg$(_c, \"Entur\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Entur","setDepartures","_s","error","setError","fetchDepartures","query","console","log","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","result","json","data","stopPlace","errors","map","e","message","join","estimatedCalls","err","interval","setInterval","clearInterval","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/soha/Desktop/lightbeam ny/src/Entur.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst Entur = ({ setDepartures }) => {\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchDepartures = async () => {\n      const query = `\n        {\n          stopPlace(id: \"NSR:StopPlace:58381\") {\n            name\n            estimatedCalls(timeRange: 72100, numberOfDepartures: 20, whiteListedModes: [metro]) {\n              realtime\n              aimedArrivalTime\n              expectedArrivalTime\n              destinationDisplay {\n                frontText\n              }\n              serviceJourney {\n                journeyPattern {\n                  line {\n                    publicCode\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      `;\n\n      try {\n        console.log(\"Fetching data...\");\n        const response = await fetch(\n          \"https://api.entur.io/journey-planner/v2/graphql\",\n          {\n            method: \"POST\",\n            headers: {\n              \"ET-Client-Name\": \"your-app-name\", // Replace with your app name\n              \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({ query }),\n          }\n        );\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const result = await response.json();\n        console.log(\"Fetch result:\", result);\n        console.log(\"stopPlace data:\", result.data.stopPlace);\n\n        if (result.errors) {\n          throw new Error(\n            `GraphQL error! ${result.errors.map((e) => e.message).join(\", \")}`\n          );\n        }\n\n        setDepartures(result.data.stopPlace.estimatedCalls);\n      } catch (err) {\n        setError(err.message);\n        console.error(\"Fetching error: \", err);\n      }\n    };\n\n    fetchDepartures();\n    const interval = setInterval(fetchDepartures, 60000); // Fetch data every 60 seconds\n\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, [setDepartures]);\n\n  return error && <p style={{ color: \"red\" }}>{error}</p>;\n};\n\nexport default Entur;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,KAAK,GAAGA,CAAC;EAAEC;AAAc,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,MAAMC,KAAK,GAAG;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;MAED,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC/B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iDAAiD,EACjD;UACEC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,gBAAgB,EAAE,eAAe;YAAE;YACnC,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAET;UAAM,CAAC;QAChC,CACF,CAAC;QAED,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;QAC3D;QAEA,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QACpCb,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEW,MAAM,CAAC;QACpCZ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEW,MAAM,CAACE,IAAI,CAACC,SAAS,CAAC;QAErD,IAAIH,MAAM,CAACI,MAAM,EAAE;UACjB,MAAM,IAAIN,KAAK,CACb,kBAAkBE,MAAM,CAACI,MAAM,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,EAClE,CAAC;QACH;QAEA1B,aAAa,CAACkB,MAAM,CAACE,IAAI,CAACC,SAAS,CAACM,cAAc,CAAC;MACrD,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZzB,QAAQ,CAACyB,GAAG,CAACH,OAAO,CAAC;QACrBnB,OAAO,CAACJ,KAAK,CAAC,kBAAkB,EAAE0B,GAAG,CAAC;MACxC;IACF,CAAC;IAEDxB,eAAe,CAAC,CAAC;IACjB,MAAMyB,QAAQ,GAAGC,WAAW,CAAC1B,eAAe,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEtD,OAAO,MAAM2B,aAAa,CAACF,QAAQ,CAAC,CAAC,CAAC;EACxC,CAAC,EAAE,CAAC7B,aAAa,CAAC,CAAC;EAEnB,OAAOE,KAAK,iBAAIJ,OAAA;IAAGkC,KAAK,EAAE;MAAEC,KAAK,EAAE;IAAM,CAAE;IAAAC,QAAA,EAAEhC;EAAK;IAAAiC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AACzD,CAAC;AAACrC,EAAA,CAvEIF,KAAK;AAAAwC,EAAA,GAALxC,KAAK;AAyEX,eAAeA,KAAK;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}